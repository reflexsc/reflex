#!/usr/bin/env python3
#$#HEADER-START
# vim:set expandtab ts=4 sw=4 ai ft=python:
#
#     Reflex Configuration Event Engine
#
#     Copyright (C) 2016 Brandon Gillespie
#
#     This program is free software: you can redistribute it and/or modify
#     it under the terms of the GNU Affero General Public License as published
#     by the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU Affero General Public License for more details.
#
#     You should have received a copy of the GNU Affero General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#$#HEADER-END

# common includes
import sys
import os
import argparse
import doctest
import subprocess
from subprocess import *
import hashlib
import shutil
import json
import re
import base64
try:
    import StringIO as strio
except:
    import io as strio

# prep for where the rfx bits are at
#rfx_base = os.path.dirname(os.path.realpath(os.path.dirname(__file__)))
rfx_cmd  = os.path.basename(__file__)
rfx_base = "../../"
rfx_lib = rfx_base + "/src/rfx/"
os.environ['REFLEX_BASE'] = rfx_base
sys.path.append(rfx_base + '/src')

import rfx
from rfx.test import *
from rfx.launch import LaunchCli
from rfx.backend import Engine
from rfx.action import Action

################################################################################
def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--debug", action='append')
    parser.add_argument("--noclean", action='store_true')
    parser.add_argument("--nounit", action='store_true')

    if os.path.exists("test.log"):
        os.unlink("test.log")

    args = parser.parse_args()
    base = rfx.Base(debug=args.debug).cfg_load()
    if not base.cfg.get('REFLEX_URL'):
        print("Skipping Reflex Launch tests: no configured REFLEX_URL")
        sys.exit(0)

    base.timestamp = False # so our output is not altered by timestamps
    base.term_width = 80
    base.notifyfd = strio.StringIO()
    base.outputfd = strio.StringIO()

    tap = TAP()

    db = Engine(base=base)
    test_name = "_rfx-test_"
    bpath = Action.action_dirs[0]

    def clean():
        tap.log("==== Cleaning... ignore these errors:\n")
        tap.TRAP(db.delete_object, "pipeline", test_name, notify=False)
        tap.TRAP(db.delete_object, "service", test_name, notify=False)
        tap.TRAP(db.delete_object, "config", test_name, notify=False)
        tap.log("==== Done Cleaning\n")

    def rm(file):
        try:
            os.unlink(file)
            return 1
        except:
            return 0

    if not args.nounit:
        tap.unit(rfx_lib, "launch.py", exit_on_fail=True)
        rm('test.log')

    ###########################################################################
    # preparations
    test_basics = True
    reset_build = True

    if reset_build:
        clean()
        tap.ok_func("Create Pipeline", db.create_object, "pipeline", {
            'name': test_name,
            'title': 'Reflex Test',
            'launch': {
                'type': 'exec',
                'rundir': '.',
                'cfgdir': '.',
                'exec': ['/usr/bin/echo', 'seuss']
            },
            'versions': False
        }, notify=False)
        tap.ok_func("Create Config", db.create_object, "config", {
            'name': test_name,
            'sensitive': { 'parameters':{} },
            'type': 'parameter',
            'versions': False
        }, notify=False)
        tap.ok_func("Create Service", db.create_object, "service", {
            'name': test_name,
            'pipeline': test_name,
            'config': test_name,
            'versions': False
        }, notify=False)

# move this into a test backend
#    def clean_get(label, expected, *args, **kwargs):
#        result = tap.TRAP(*args, **kwargs)
#        if type(result) != dict:
#            print("Bad Result: {}".format(result))
#        else:
#            del(result['createdAt'])
#            del(result['updatedAt'])
#            del(result['id'])
#            tap.ok_data(label, expected, result)
#
#    clean_get("Get Pipeline", "7b21cd5657acc53011ff50b7d12897b1",
#               db.get_object, "pipeline", test_name, notify=False)
#    clean_get("Get Service", "e03eee527cbcb4b6c2a8d9827f3f3556",
#               db.get_object, "service", test_name, notify=False)
#    clean_get("Get Config", "e6a40afc7b9689ad8605b5e8de3d99af",
#               db.get_object, "config", test_name, notify=False)

    ###########################################################################
    # test the basics first
#    if test_:
#    cli = LaunchCli(base=base)
#    class args:
#        commit = False
#        debug = ["*"]
#
#        tap.ok_func_io("launch env", '7453726a211a2eee4483546b5e8b9ab7',
#                       cli, cli.env_cli, test_name, args)
#        tap.ok_func_io("launch config", '1fb8a624687b37e846696078210a6e3e',
#                       cli, cli.config_cli, test_name, args)
    tap.ok_run("launch env w/arg", 'fd7cae61a5e95151fc41db89f9e5a2e2',
               ["launch", "--notime", "env", test_name])

    os.environ['REFLEX_SERVICE'] = test_name
    tap.ok_run("launch env w/env", 'fd7cae61a5e95151fc41db89f9e5a2e2',
               ["launch", "--notime", "env"])
    del os.environ["REFLEX_SERVICE"]

    tap.ok_run("launch config", 'fa3f311e15c1ac24b049c1afab5b5f91',
               ["launch", "--notime", "config", test_name])

    tap.ok_run("launch service", '1cb671b1a1ef31074bddcb7258fb3676',
               ["launch", "--notime", "service", test_name])

    ###########################################################################
    # test an action driven launch 

    if os.path.exists(bpath):
        shutil.rmtree(bpath)

    def store(fpath, content, mode=False):
        based = os.path.dirname(fpath)
        if not os.path.exists(based):
            os.mkdir(based)
        with open(fpath, 'wt') as outf:
            outf.write(content)
        if mode:
            os.chmod(fpath, mode)

    store(bpath + "/config.json", json.dumps({
            'config':{
                "rundir": '.',
                "cfgdir": '.',
            },
            "setenv": {
            },
            "actions": {
                "variant": {
                    "type": "script",
                    "target": "variant",
                },
                "launch": {
                    "type": "script",
                    "target": "launch",
                }
            }
        }))

    store(bpath + "/variant", """#!/bin/bash
        echo "variant action"
        exit 0
        """, mode=0o755)

    store(bpath + "/launch", """#!/bin/bash
        echo "launched it"
        exit 0
        """, mode=0o755)

    tap.ok_func("Update Pipeline", db.update_object, "pipeline", test_name, {
        'name': test_name,
        'title': 'Reflex Service Test',
        'launch': {
            'type': 'action',
            'target': 'launch',
        },
        'versions': False
    }, notify=False)

    tap.ok_run("launch service", '9495b569cd55f6a4045ef9c589092a07',
               ["launch", "--notime", "--debug=test", "service", test_name])

    tap.ok_run("launch service action", 'bb598a26560f92ddb1b487dc0e37f03b',
               ["launch", "--notime", "--debug=test", "service", test_name + ":variant"])

    if not args.noclean:
        clean()
        shutil.rmtree(bpath)

    tap.exit()

################################################################################
if __name__ == "__main__":
    main()

